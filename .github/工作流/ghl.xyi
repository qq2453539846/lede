＃
＃这是免费软件，可以使用MIT。
＃ 
＃版权所有（C）2019 P3TERX <https://p3terx.com>
＃版权所有（C）2019 KFERMercer <KFER.Mercer@gmail.com>
＃ 
＃ <https://github.com/KFERMercer/OpenWrt-CI>
＃

名称：OpenWrt-x86

于：
  推送：
    分支机构：
      - 大师
    时间表：
      - cron的：0 20 * * *
  ＃发布：
  ＃    类型：[已发布]

职位：

  建立：

    运行：ubuntu-latest

    步骤：

      - 名称：结帐
        用途：actions / checkout @ master
        与：
          参考：大师

      - 名称：初始化环境
        env：
          DEBIAN_FRONTEND：非互动
        运行：|
          docker rmi`docker images -q`
          echo“正在删除文件，请稍候...”
          须藤rm -rf / usr / share / dotnet / etc / mysql / etc / php
          须藤-E apt-get -y清除azure-cli ghc * zulu * hhvm llvm * firefox google * dotnet * powershell openjdk * mysql * php *
          sudo -E apt-get更新
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl -dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          须藤-E apt-get -y autoremove --purge
          须藤-E apt-get clean
      - 名称：更新供稿
        运行：|
          ./scripts/feeds更新-a
          ./scripts/feeds install -a
      - 名称：Costom配置文件
        运行：|
          rm -f ./.config*
          触摸./.config
          ＃
          ＃=======================固件定制部分====================== ==
          ＃ 
          ＃ 
          ＃如果不对本区块链所做的任何编辑，则应生成默认配置固件。 
          ＃ 
          ＃以下为定制化固件选项和说明：
          ＃
          ＃
          ＃某些插件/选项是重置开启的，如果想要关闭，请参照以下示例进行编写：
          ＃ 
          ＃========================================
          ＃| ＃取消编译VMware实质：|
          ＃| cat >> .config << EOF |
          ＃| ＃未设置CONFIG_VMDK_IMAGES |
          ＃| EOF |
          ＃========================================
          ＃
          ＃ 
          ＃以下是一些提前准备好的一些插件选项。
          ＃直接取消注释相应代码块即可应用。不要取消注释代码块上的汉字说明。
          ＃如果不需要代码块里的某某配置，只需要删除相应行。
          ＃
          ＃如果需要其他插件，请按照示例自行添加。
          ＃注意，只需添加依赖链末端的包。如果你需要插件A，同时A依赖B，即只需要添加A.
          ＃ 
          ＃任何您想要对固件进行怎样的定制，都需要且只需要修改EOF回环内的内容。
          ＃ 
          ＃编译x64固件：
          猫>> .config << EOF
          CONFIG_TARGET_x86 = y
          CONFIG_TARGET_x86_64 = y
          CONFIG_TARGET_x86_64_Generic = y
          紧急行动
          ＃固件压缩：
          猫>> .config << EOF
          CONFIG_TARGET_IMAGES_GZIP = y
          紧急行动
          ＃编译UEFI固件：
          猫>> .config << EOF
          CONFIG_EFI_IMAGES = y
          紧急行动
          ＃多文件系统支持：
          猫>> .config << EOF
          CONFIG_PACKAGE_kmod-fs-nfs = y
          CONFIG_PACKAGE_kmod-fs-nfs-common = y
          CONFIG_PACKAGE_kmod-fs-nfs-v3 = y
          CONFIG_PACKAGE_kmod-fs-nfs-v4 = y
          CONFIG_PACKAGE_kmod-fs-ntfs = y
          CONFIG_PACKAGE_kmod-fs-squashfs = y
          紧急行动
          ＃USB3.0支持：
          猫>> .config << EOF
          CONFIG_PACKAGE_kmod-usb-ohci = y
          CONFIG_PACKAGE_kmod-usb-ohci-pci = y
          CONFIG_PACKAGE_kmod-usb2 = y
          CONFIG_PACKAGE_kmod-usb2-pci = y
          CONFIG_PACKAGE_kmod-usb3 = y
          紧急行动
          ＃常用LuCI插件选择：
          猫>> .config << EOF
          CONFIG_PACKAGE_luci-app-accesscontrol = y
          CONFIG_PACKAGE_luci-app-adbyby-plus = y
          CONFIG_PACKAGE_luci-app-arpbind = y
          CONFIG_PACKAGE_luci-app-autoreboot = y
          CONFIG_PACKAGE_luci-app-ddns = y
          CONFIG_PACKAGE_luci-app-dnspod = y
          CONFIG_PACKAGE_luci-app-filetransfer = y
          CONFIG_PACKAGE_luci-app-firewall = y
          CONFIG_PACKAGE_luci-app-flowoffload = y
          CONFIG_PACKAGE_luci-app-ipsec-vpnd = y
          CONFIG_PACKAGE_luci-app-nlbwmon = y
          CONFIG_PACKAGE_luci-app-pptp-server = y
          CONFIG_PACKAGE_luci-app-ramfree = y
          CONFIG_PACKAGE_luci-app-samba = y
          CONFIG_PACKAGE_luci-app-sqm = y
          CONFIG_PACKAGE_luci-app-ssr-plus = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan = y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun = y
          CONFIG_PACKAGE_luci-app-unblockmusic = y
          CONFIG_PACKAGE_luci-app-upnp = y
          CONFIG_PACKAGE_luci-app-usb-printer = y
          CONFIG_PACKAGE_luci-app-v2ray-server = y
          CONFIG_PACKAGE_luci-app-vlmcsd = y
          CONFIG_PACKAGE_luci-app-vsftpd = y
          CONFIG_PACKAGE_luci-app-wol = y
          紧急行动
          ＃LuCI主题：
          猫>> .config << EOF
          CONFIG_PACKAGE_luci-theme-argon = y
          CONFIG_PACKAGE_luci-theme-netgear = y
          紧急行动
          ＃常见缺点：
          猫>> .config << EOF
          CONFIG_PACKAGE_curl = y
          CONFIG_PACKAGE_htop = y
          CONFIG_PACKAGE_nano = y
          CONFIG_PACKAGE_screen = y
          CONFIG_PACKAGE_tree = y
          CONFIG_PACKAGE_vim-fuller = y
          CONFIG_PACKAGE_wget = y
          紧急行动
          ＃取消编译VMware常规以及补充（不要删除被缩进的注释符号）：
          猫>> .config << EOF
          ＃未设置CONFIG_TARGET_IMAGES_PAD
          ＃未设置config_vmdk_images
          紧急行动
          ＃ 
          ＃========================固件定制部分结束===================== ===
          ＃ 
          sed -i's / ^ [\ t] * // g'./.config
          使defconfig
      - 名称：下载
        运行：|
          进行下载-j8
          找到./dl/ -size -1024c -exec rm -f {} \;
      - 名称：编译固件
        运行：DEBIAN_FRONTEND =非交互式make -j $（nproc）V = s

      - 名称：准备神器
        运行：查找./bin/targets/ -type d -name“ packages” | xargs rm -rf {}

      - 名称：上传工件
        用途：actions / upload-artifact @ master
        与：
          名称：OpenWrt固件
          路径：./bin/targets/
